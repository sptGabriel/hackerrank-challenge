package main

import (
	"reflect"
	"testing"
)

func TestChallenge(t *testing.T) {
	t.Parallel()

	type args struct {
		maxDigit int
	}
	tests := []struct {
		name string
		args args
		want []int
	}{
		{
			name: "Should return all combinations of 0",
			args: args{
				maxDigit: 0,
			},
			want: nil,
		},
		{
			name: "Should return all combinations of 1",
			args: args{
				maxDigit: 1,
			},
			want: nil,
		},
		{
			name: "Should return all combinations of 2",
			args: args{
				maxDigit: 2,
			},
			want: nil,
		},
		{
			name: "Should return all combinations of 3",
			args: args{
				maxDigit: 3,
			},
			want: nil,
		},
		{
			name: "Should return all combinations of 4",
			args: args{
				maxDigit: 4,
			},
			want: nil,
		},
		{
			name: "Should return all combinations of 5",
			args: args{
				maxDigit: 5,
			},
			want: nil,
		},
		{
			name: "Should return all combinations of 6",
			args: args{
				maxDigit: 6,
			},
			want: []int{3666, 4566, 4656, 4665, 5466, 5556, 5565, 5646, 5655, 5664, 6366, 6456, 6465, 6546, 6555, 6564, 6636, 6645, 6654, 6663},
		},
		{
			name: "Should return all combinations of 7",
			args: args{
				maxDigit: 7,
			},
			want: []int{
				1677, 1767, 1776, 2577, 2667, 2676, 2757, 2766, 2775, 3477, 3567, 3576, 3657, 3666, 3675, 3747, 3756, 3765, 3774, 4377, 4467, 4476, 4557, 4566, 4575, 4647, 4656, 4665, 4674, 4737, 4746, 4755, 4764, 4773, 5277, 5367, 5376, 5457, 5466, 5475, 5547, 5556, 5565, 5574, 5637, 5646, 5655, 5664, 5673, 5727, 5736, 5745, 5754, 5763, 5772, 6177, 6267, 6276, 6357, 6366, 6375, 6447, 6456, 6465, 6474, 6537, 6546, 6555, 6564, 6573, 6627, 6636, 6645, 6654, 6663, 6672, 6717, 6726, 6735, 6744, 6753, 6762, 6771, 7077, 7167, 7176, 7257, 7266, 7275, 7347, 7356, 7365, 7374, 7437, 7446, 7455, 7464, 7473, 7527, 7536, 7545, 7554, 7563, 7572, 7617, 7626, 7635, 7644, 7653, 7662, 7671, 7707, 7716, 7725, 7734, 7743, 7752, 7761, 7770, 7778, 7779, 7787, 7797, 7877, 7977, 8777, 9777,
			},
		},
		{
			name: "Should return all combinations of 8",
			args: args{
				maxDigit: 8,
			},
			want: []int{
				1488, 1578, 1587, 1668, 1677, 1686, 1758, 1767, 1776, 1785, 1848, 1857, 1866, 1875, 1884, 2388, 2478, 2487, 2568, 2577, 2586, 2658, 2667, 2676, 2685, 2748, 2757, 2766, 2775, 2784, 2838, 2847, 2856, 2865, 2874, 2883, 3288, 3378, 3387, 3468, 3477, 3486, 3558, 3567, 3576, 3585, 3648, 3657, 3666, 3675, 3684, 3738, 3747, 3756, 3765, 3774, 3783, 3828, 3837, 3846, 3855, 3864, 3873, 3882, 4188, 4278, 4287, 4368, 4377, 4386, 4458, 4467, 4476, 4485, 4548, 4557, 4566, 4575, 4584, 4638, 4647, 4656, 4665, 4674, 4683, 4728, 4737, 4746, 4755, 4764, 4773, 4782, 4818, 4827, 4836, 4845, 4854, 4863, 4872, 4881, 5088, 5178, 5187, 5268, 5277, 5286, 5358, 5367, 5376, 5385, 5448, 5457, 5466, 5475, 5484, 5538, 5547, 5556, 5565, 5574, 5583, 5628, 5637, 5646, 5655, 5664, 5673, 5682, 5718, 5727, 5736, 5745, 5754, 5763, 5772, 5781, 5808, 5817, 5826, 5835, 5844, 5853, 5862, 5871, 5880, 5889, 5898, 5988, 6078, 6087, 6168, 6177, 6186, 6258, 6267, 6276, 6285, 6348, 6357, 6366, 6375, 6384, 6438, 6447, 6456, 6465, 6474, 6483, 6528, 6537, 6546, 6555, 6564, 6573, 6582, 6618, 6627, 6636, 6645, 6654, 6663, 6672, 6681, 6708, 6717, 6726, 6735, 6744, 6753, 6762, 6771, 6780, 6789, 6798, 6807, 6816, 6825, 6834, 6843, 6852, 6861, 6870, 6879, 6897, 6978, 6987, 7068, 7077, 7086, 7158, 7167, 7176, 7185, 7248, 7257, 7266, 7275, 7284, 7338, 7347, 7356, 7365, 7374, 7383, 7428, 7437, 7446, 7455, 7464, 7473, 7482, 7518, 7527, 7536, 7545, 7554, 7563, 7572, 7581, 7608, 7617, 7626, 7635, 7644, 7653, 7662, 7671, 7680, 7689, 7698, 7707, 7716, 7725, 7734, 7743, 7752, 7761, 7770, 7779, 7797, 7806, 7815, 7824, 7833, 7842, 7851, 7860, 7869, 7896, 7968, 7977, 7986, 8058, 8067, 8076, 8085, 8148, 8157, 8166, 8175, 8184, 8238, 8247, 8256, 8265, 8274, 8283, 8328, 8337, 8346, 8355, 8364, 8373, 8382, 8418, 8427, 8436, 8445, 8454, 8463, 8472, 8481, 8508, 8517, 8526, 8535, 8544, 8553, 8562, 8571, 8580, 8589, 8598, 8607, 8616, 8625, 8634, 8643, 8652, 8661, 8670, 8679, 8697, 8706, 8715, 8724, 8733, 8742, 8751, 8760, 8769, 8796, 8805, 8814, 8823, 8832, 8841, 8850, 8859, 8895, 8958, 8967, 8976, 8985, 9588, 9678, 9687, 9768, 9777, 9786, 9858, 9867, 9876, 9885},
		},
		{
			name: "Should return all combinations of 9",
			args: args{
				maxDigit: 9,
			},
			want: []int{
				1299, 1389, 1398, 1479, 1488, 1497, 1569, 1578, 1587, 1596, 1659, 1668, 1677, 1686, 1695, 1749, 1758, 1767, 1776, 1785, 1794, 1839, 1848, 1857, 1866, 1875, 1884, 1893, 1929, 1938, 1947, 1956, 1965, 1974, 1983, 1992, 2199, 2289, 2298, 2379, 2388, 2397, 2469, 2478, 2487, 2496, 2559, 2568, 2577, 2586, 2595, 2649, 2658, 2667, 2676, 2685, 2694, 2739, 2748, 2757, 2766, 2775, 2784, 2793, 2829, 2838, 2847, 2856, 2865, 2874, 2883, 2892, 2919, 2928, 2937, 2946, 2955, 2964, 2973, 2982, 2991, 3099, 3189, 3198, 3279, 3288, 3297, 3369, 3378, 3387, 3396, 3459, 3468, 3477, 3486, 3495, 3549, 3558, 3567, 3576, 3585, 3594, 3639, 3648, 3657, 3666, 3675, 3684, 3693, 3729, 3738, 3747, 3756, 3765, 3774, 3783, 3792, 3819, 3828, 3837, 3846, 3855, 3864, 3873, 3882, 3891, 3909, 3918, 3927, 3936, 3945, 3954, 3963, 3972, 3981, 3990, 4089, 4098, 4179, 4188, 4197, 4269, 4278, 4287, 4296, 4359, 4368, 4377, 4386, 4395, 4449, 4458, 4467, 4476, 4485, 4494, 4539, 4548, 4557, 4566, 4575, 4584, 4593, 4629, 4638, 4647, 4656, 4665, 4674, 4683, 4692, 4719, 4728, 4737, 4746, 4755, 4764, 4773, 4782, 4791, 4809, 4818, 4827, 4836, 4845, 4854, 4863, 4872, 4881, 4890, 4908, 4917, 4926, 4935, 4944, 4953, 4962, 4971, 4980, 5079, 5088, 5097, 5169, 5178, 5187, 5196, 5259, 5268, 5277, 5286, 5295, 5349, 5358, 5367, 5376, 5385, 5394, 5439, 5448, 5457, 5466, 5475, 5484, 5493, 5529, 5538, 5547, 5556, 5565, 5574, 5583, 5592, 5619, 5628, 5637, 5646, 5655, 5664, 5673, 5682, 5691, 5709, 5718, 5727, 5736, 5745, 5754, 5763, 5772, 5781, 5790, 5808, 5817, 5826, 5835, 5844, 5853, 5862, 5871, 5880, 5907, 5916, 5925, 5934, 5943, 5952, 5961, 5970, 6069, 6078, 6087, 6096, 6159, 6168, 6177, 6186, 6195, 6249, 6258, 6267, 6276, 6285, 6294, 6339, 6348, 6357, 6366, 6375, 6384, 6393, 6429, 6438, 6447, 6456, 6465, 6474, 6483, 6492, 6519, 6528, 6537, 6546, 6555, 6564, 6573, 6582, 6591, 6609, 6618, 6627, 6636, 6645, 6654, 6663, 6672, 6681, 6690, 6708, 6717, 6726, 6735, 6744, 6753, 6762, 6771, 6780, 6807, 6816, 6825, 6834, 6843, 6852, 6861, 6870, 6906, 6915, 6924, 6933, 6942, 6951, 6960, 7059, 7068, 7077, 7086, 7095, 7149, 7158, 7167, 7176, 7185, 7194, 7239, 7248, 7257, 7266, 7275, 7284, 7293, 7329, 7338, 7347, 7356, 7365, 7374, 7383, 7392, 7419, 7428, 7437, 7446, 7455, 7464, 7473, 7482, 7491, 7509, 7518, 7527, 7536, 7545, 7554, 7563, 7572, 7581, 7590, 7608, 7617, 7626, 7635, 7644, 7653, 7662, 7671, 7680, 7707, 7716, 7725, 7734, 7743, 7752, 7761, 7770, 7806, 7815, 7824, 7833, 7842, 7851, 7860, 7905, 7914, 7923, 7932, 7941, 7950, 8049, 8058, 8067, 8076, 8085, 8094, 8139, 8148, 8157, 8166, 8175, 8184, 8193, 8229, 8238, 8247, 8256, 8265, 8274, 8283, 8292, 8319, 8328, 8337, 8346, 8355, 8364, 8373, 8382, 8391, 8409, 8418, 8427, 8436, 8445, 8454, 8463, 8472, 8481, 8490, 8508, 8517, 8526, 8535, 8544, 8553, 8562, 8571, 8580, 8607, 8616, 8625, 8634, 8643, 8652, 8661, 8670, 8706, 8715, 8724, 8733, 8742, 8751, 8760, 8805, 8814, 8823, 8832, 8841, 8850, 8904, 8913, 8922, 8931, 8940, 9039, 9048, 9057, 9066, 9075, 9084, 9093, 9129, 9138, 9147, 9156, 9165, 9174, 9183, 9192, 9219, 9228, 9237, 9246, 9255, 9264, 9273, 9282, 9291, 9309, 9318, 9327, 9336, 9345, 9354, 9363, 9372, 9381, 9390, 9408, 9417, 9426, 9435, 9444, 9453, 9462, 9471, 9480, 9507, 9516, 9525, 9534, 9543, 9552, 9561, 9570, 9606, 9615, 9624, 9633, 9642, 9651, 9660, 9705, 9714, 9723, 9732, 9741, 9750, 9804, 9813, 9822, 9831, 9840, 9903, 9912, 9921, 9930,
			},
		},
	}
	for _, tt := range tests {
		tt := tt
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			result := getPossibleNumbers(tt.args.maxDigit)
			if !reflect.DeepEqual(tt.want, result) {
				t.Errorf("expected '%d' but got '%d'", tt.want, result)
			}
		})
	}
}
